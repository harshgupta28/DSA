_____________________________________________________

MINIMUM SPANNING TREE  KRUSKAL'S ALGORITHM
            - for weighted graph
            - using path compression

struct edge
{
    lli a;
    lli b;
    lli w;
};
edge ar[100000];
lli parent[10001];

bool comp(edge a, edge b)
{
    if (a.w < b.w)
        return true;

    return false;
}

lli find(lli a)
{
    if (parent[a] < 0)
        return a;
    else
    {
        lli x = find(parent[a]);
        parent[a] = x;
        return x;
    }
}

void merge(lli a, lli b)
{
    parent[a] = b;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    lli n, m, a, b, sum = 0;// n for no of nodes//m for edges
    cin >> n >> m;          // w for weights

    for (lli i = 1; i <= n; i++)
        parent[i] = -1;

    for (lli i = 0; i < m; i++)
        cin >> ar[i].a >> ar[i].b >> ar[i].w;

    sort(ar, ar + m, comp);

    for (lli i = 0; i < m; i++)
    {
        a = find(ar[i].a);
        b = find(ar[i].b);

        if (a != b)
        {
            sum += ar[i].w;
            merge(a, b);
        }
    }
    cout << sum;
    return 0;
}
_________________________________________________________
MINIMUM SPANNING TREE  PRIM'S ALGORITHM
            - for weighted graph

steps 1 - all nodes have weights infinity except source
            , source weight is zero;
      2 - select node with minimum weight (start at source)

      3 - include selected node in mst set

      4 - relax/compute all adjacent edges

      5 - repeat steps 2,3,4 until all nodes are not included
          in set mst.

3 array will be required
    1 - dist (for distance of the node)
    2 - mst set (for checking if node has been processed or not)
    3 - parent (for printing mst)

1) Create a set mstSet that keeps track of vertices already included in MST. 
2) Assign a key value to all vertices in the input graph. Initialize all key values as INFINITE. Assign key value as 0 for the first vertex so that it is picked first. 
3) While mstSet doesn’t include all vertices 
….a) Pick a vertex u which is not there in mstSet and has minimum key value. 
….b) Include u to mstSet. 
….c) Update key value of all adjacent vertices of u(not included in mst). To update the key values, iterate through all adjacent vertices. For every adjacent vertex v, if weight of edge u-v is less than the previous key value of v, update the key value as weight of u-v
            
#include<bits/stdc++.h>
using namespace std;

#define V 6     //No of vertices

int selectMinVertex(vector<int>& value,vector<bool>& setMST)
{
    int minimum = INT_MAX;
    int vertex;
    for(int i=0;i<V;++i)
    {
        if(setMST[i]==false && value[i]<minimum)
        {
            vertex = i;
            minimum = value[i];
        }
    }
    return vertex;
}

void findMST(int graph[V][V])
{
    int parent[V];      //Stores MST
    vector<int> value(V,INT_MAX);   //Used for edge relaxation
    vector<bool> setMST(V,false);   //TRUE->Vertex is included in MST

    //Assuming start point as Node-0
    parent[0] = -1; //Start node has no parent
    value[0] = 0;   //start node has value=0 to get picked 1st

    //Form MST with (V-1) edges
    for(int i=0;i<V-1;++i)
    {
        //Select best Vertex by applying greedy method
        int U = selectMinVertex(value,setMST);
        setMST[U] = true;   //Include new Vertex in MST

        //Relax adjacent vertices (not yet included in MST)
        // we can use adjacency list for less time complexity
        for(int j=0;j<V;++j)
        {
            /* 3 constraints to relax:-
                  1.Edge is present from U to j.
                  2.Vertex j is not included in MST
                  3.Edge weight is smaller than current edge weight
            */
            if(graph[U][j]!=0 && setMST[j]==false && graph[U][j]<value[j])
            {
                value[j] = graph[U][j];
                parent[j] = U;
            }
        }
    }
    //Print MST
    for(int i=1;i<V;++i)
        cout<<"U->V: "<<parent[i]<<"->"<<i<<"  wt = "<<graph[parent[i]][i]<<"\n";
}

int main()
{
    int graph[V][V] = { {0, 4, 6, 0, 0, 0},
                        {4, 0, 6, 3, 4, 0},
                        {6, 6, 0, 1, 8, 0},
                        {0, 3, 1, 0, 2, 3},
                        {0, 4, 8, 2, 0, 7},
                        {0, 0, 0, 3, 7, 0} };

    findMST(graph); 
    return 0;
}

//TIME COMPLEXITY: O(V^2)

_________________________________________________________

            LOWEST COMMON ANCESTOR

-- 1st approach(novice) // time-O(n)
                            space-O(n)

int find_lca(int a,int b)
{
    if(level[a]>level b)
        swap (a,b);

    int d=level[b]-level[a];

    while(d>0)
    {
        b=parent[b];
        d--
    }
    if(a==b) return a;

    while(parent[a]!=parent[b])
    {
        a=parent[a];
        b=parent[b];
    }
    return parent[a]'
}

--2nd Binary lifting

    -making jump of L (in power of 2)L<=d  making it log(n) 
    time ans space nlog(n) as for each node we have to save
    2th power parent

_________________________________________________________

            DISTANCE BTW TWO NODES IN TREE

dist = level[a] + level[b] - 2 * level[LCA]

____________________________________________________________

DIJKSTRA FOR WEIGHTED graph (directed/undirected)

    for sssp in wtd graph
    only +ve wts
        
vector<pair<int,int> > adj[n+1];

int main()
{
    int n,m;// n nodes and m edges
    while(m--)
    {
        int a,b,w;
        cin>>a>>b>>w; // w for weight
        adj[a].push_back({b,w});
        adj[b].push_back({a,w});
        //if graph is directed push only 
       // one time
    }

    // declaration of min heap 
    priority_queue< pair<int,int> ,vector<pair<int,int> >
                   , greater<pair<int,int> > > pq;
    
    // in pq first is weight and second is b
    vector<int> dist(n+1,INT_MAX);
    pq.push({0,1});// 1 is source node
    dist[1]=0;
    vector<bool> vis(n+1,0);

    while(!pq.empty())
    {
        int curr = pq.top().second;
        int curr_d = pq.top().first;
        pq.pop();
       
        for(auto edge: adj[curr])
        {
            if(curr_d+ edge.second <dist[edge.first])
            {
                dist[edge.first]=curr_d+ edge.second ;
                pq.push({ dist[edge.first] , edge.first});
            }
        }
    }

    for(int i=1;i<=n;i++)
        cout<<dist[i]<<" ";
}

_____________________________________________________________

FLOYD WARSHALL ALGORITHM
        - all pairs shortest path
        - -ve wts ,+ve wts

#define INF 99999
graph is input graph and inf shows no connection
void floydWarshall(int graph[][n])
{
    int dist[n+1][n+1], i, j, k;

    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            dist[i][j] = graph[i][j];

    for (k = 1; k <= n; k++)
        for (i = 1; i <= n; i++)
            for (j = 1; j <= n; j++)
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];

    print dist matrix ;
}
